{% set data = salt['mc_utils.json_load'](data) %}
# MANAGED VIA SALT (PHPFPM)
# phpfpm/fastcgi
# Here we catch the 'false' Location used to inexistent {{ data.fpm_sock }}php5.external
# and push it to the external FastCgi process via a socket
# note: socket path is relative to FastCgiIpcDir
# which is set in Main configuration /etc/apache2/mods-available/fastcgi.conf
# Remember that we have 2 fastcgi app: the QGIS app and the PHPFPM pool
<IfModule mod_fastcgi.c>
    # mark WMS requests to be handled by qgis mapserver fastcgi script
    AddHandler fastcgi-script .fcgi
    Action fastcgi-script  /wms-cgi
    Alias /wms-cgi /cgi-bin/qgis_mapserv.fcgi
    FastCgiExternalServer /cgi-bin/qgis_mapserv.fcgi -socket {{data.qgis_sock}} -appConnTimeout 15 -idle-timeout 30
    <Directory "{{data.doc_root}}/cgi-bin">
        AllowOverride None
        Options ExecCGI FollowSymLinks
        <IfVersion < 2.3>
            Order allow,deny
            Allow from all
        </IfVersion>
        <IfVersion >= 2.3>
            Require all granted
        </IfVersion>
    </Directory>
    # all .php files will be pushed to a php5-fcgi handler for the APP
    AddHandler php5-fcgi .php
    # action module will let us run a cgi script based on handler php5-fcgi
    Action php5-fcgi /fcgi-bin/{{data.domain}}_fpmphp5.external
    # and we add an Alias to the fcgi location
    Alias /fcgi-bin/{{data.domain}}_fpmphp5.external /{{data.domain}}_fpmphp5.external
    # now we catch this cgi script which in fact does not exists on filesystem
    # we catch it on the url (Location)
    FastCgiExternalServer /{{data.domain}}_fpmphp5.external -socket {{ data.fpm_sock}} -appConnTimeout 30 -idle-timeout 60
    <Location /fcgi-bin/{{data.domain}}_fpmphp5.external>
        # here we prevent direct access to this Location url,
        # env=REDIRECT_STATUS will let us use this fcgi-bin url
        # only after an internal redirect (by upper Action)
        <IfVersion < 2.3>
            Order Deny,Allow
            Deny from All
            Allow from env=REDIRECT_STATUS
        </IfVersion>
        <IfVersion >= 2.3>
            Require env REDIRECT_STATUS
        </IfVersion>
    </Location>
</IfModule>
# / handling
<Directory />
    Options FollowSymLinks
    # No .htaccess checks
    AllowOverride None
    # Access denied!
    <IfVersion < 2.3>
        Order Deny,Allow
        Deny from All
    </IfVersion>
    <IfVersion >= 2.3>
        Require all denied
    </IfVersion>
    #.svn & .git directories must be avoided!!
    RedirectMatch 404 /\.svn(/|$)
    RedirectMatch 404 /\.git(/|$)
</Directory>

# Project Directory
<Directory {{ data.doc_root }}>
    <IfVersion < 2.3>
        Order allow,deny
        Allow from all
    </IfVersion>
    <IfVersion >= 2.3>
        Require all granted
    </IfVersion>
    {% if data.allow_htaccess %}AllowOverride None
    {% else %}AllowOverride All
    {% endif %}
    # Follow symbolic links in this directory.
    Options +FollowSymLinks -Indexes -Multiviews

    # Set the default handler
    DirectoryIndex index.php

    # Requires mod_expires to be enabled.
    <IfModule mod_expires.c>
        # Enable expirations.
        ExpiresActive On
        # Cache all files for 2 weeks after access (A).
        ExpiresDefault A1209600
        <FilesMatch \.php$>
            # Do not allow PHP scripts to be cached unless they explicitly send cache
            # headers themselves. Otherwise all scripts would have to overwrite the
            # headers set by mod_expires if they want another caching behavior. This may
            # fail if an error occurs early in the bootstrap process, and it may cause
            # problems if a non-Drupal PHP file is installed in a subdirectory.
            ExpiresActive Off
        </FilesMatch>
    </IfModule>
    # Rules to correctly serve gzip compressed CSS and JS files.
    # Requires both mod_rewrite and mod_headers to be enabled.
    <IfModule mod_headers.c>
        # Serve gzip compressed CSS files if they exist and the client accepts gzip.
        RewriteCond %{HTTP:Accept-encoding} gzip
        RewriteCond %{REQUEST_FILENAME}\.gz -s
        RewriteRule ^(.*)\.css $1\.css\.gz [QSA]

        # Serve gzip compressed JS files if they exist and the client accepts gzip.
        RewriteCond %{HTTP:Accept-encoding} gzip
        RewriteCond %{REQUEST_FILENAME}\.gz -s
        RewriteRule ^(.*)\.js $1\.js\.gz [QSA]

        # Serve correct content types, and prevent mod_deflate double gzip.
        RewriteRule \.css\.gz$ - [T=text/css,E=no-gzip:1]
        RewriteRule \.js\.gz$ - [T=text/javascript,E=no-gzip:1]

        <FilesMatch "(\.js\.gz|\.css\.gz)$">
          # Serve correct encoding type.
          Header append Content-Encoding gzip
          # Force proxies to cache gzipped & non-gzipped css/js files separately.
          Header append Vary Accept-Encoding
        </FilesMatch>
    </IfModule>
</Directory>
# vim:set ft=apache :
